{"version":3,"sources":["webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme.service.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service.ts","webpack:///src/common/core/ui/custom-menu/menu-item.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.ts","webpack:///src/common/shared/icon-selector/icon-selector.component.html","webpack:///src/common/shared/icon-selector/icon-selector.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.html","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.html","webpack:///src/common/admin/appearance/appearance.component.html","webpack:///src/common/admin/appearance/appearance.component.ts","webpack:///src/common/admin/appearance/can-deactivate-appearance.guard.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor-resolver.service.ts","webpack:///src/common/admin/appearance/appearance-routing.module.ts","webpack:///src/common/shared/icon-selector/icon-selector.module.ts","webpack:///src/common/admin/appearance/base-appearance.module.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.module.ts","webpack:///src/app/admin/appearance/app-appearance.module.ts","webpack:///src/common/core/ui/overlay-panel/positions/right-position.ts"],"names":["GeneralAppearancePanelComponent","CssThemeService","fb","editor","form","this","group","defaults","Object","keys","controls","forEach","key","currentValue","patchValue","valueChanges","subscribe","value","addChanges","defaultSettings","http","get","params","post","id","put","ids","CrupdateCssThemeModalComponent","dialogRef","data","cssTheme","toast","loading$","BehaviorSubject","errors$","name","is_dark","default_dark","default_light","theme","pipe","filter","setValue","update","create","response","open","close","err","next","messages","CssThemeColorsPanelComponent","themes","colorCache","setSaveRequest","saveColors","bind","entries","colors","color","addControl","initiated$","setColors","payload","postMessage","replace","$event","stopPropagation","ThemesAppearancePanelComponent","MenuEditor","MenuItemCategoriesService","appearance","modal","router","route","loadedThemes$","selectedTheme$","path$","map","path","push","reloadThemes","querySub","unsubscribe","afterClosed","newTheme","navigate","queryParams","queryParamsHandling","setSelectedTheme","closeActivePanel","show","title","body","ok","confirmed","deleteTheme","all","finalize","pagination","bindToQueryParams","find","t","openPreviousPanel","MenuItem","type","order","condition","target","position","activeExact","Math","floor","random","settings","allMenus$","activeMenu$","allMenus","commitChanges","previousIndex","currentIndex","activeMenu","items","i","indexOf","splice","item","transformLocalLinksToRoutes","baseUrl","getBaseUrl","action","menus","JSON","stringify","setConfig","json","parse","menuData","menu","getWithCache","AddMenuItemPanelComponent","overlayPanelRef","itemCategories","linkForm","label","menuItemCategories","categories","addItem","reset","addLinkMenuItem","IconSelectorComponent","icons$","iconSelected","icons","icon","observers","length","emitValue","MenuItemsComponent","overlayPanel","cd","subscriptions","subscription","e","reorderActiveMenuItems","selectedMenuItem","removeItem","origin","menuItem","valueChanged","detectChanges","MenusAppearancePanelComponent","panel","el","setFromJson","slice","offsetX","panelClass","deleteActive","SeoAppearancePanelComponent","seoFields","field","control","CodeEditorModalComponent","CustomCodeAppearancePanelComponent","lazyLoader","syntaxInvalid$","initEditor","contents","language","overrideDialogCloseEvents","getValue","loadAsset","then","ace","edit","editorEl","nativeElement","getSession","setMode","setTheme","$blockScrolling","Infinity","on","annotations","getAnnotations","test","text","setAnnotations","syntaxInvalid","a","disableClose","backdropClick","keydownEvents","event","keyCode","confirm","initialValue","newValue","saveChanges","addCodeToPreview","content","openModal","CanDeactivateAppearance","AppearanceComponent","AppearanceEditorResolver","AppearanceRoutingModule","IconSelectorModule","BaseAppearanceModule","ColorPickerInputModule","AppAppearanceModule","breakpoints","leftColumnIsHidden","panelPortal$","activePanel$","component","isMobile$","init","iframe","snapshot","routerSub","openPanel","str","closeEditor","toggleLeftSidebar","changes$","bodyBold","cancel","routes","permissions","resolve","state","catchError","mergeMap","of","canActivate","canDeactivate","children","forChild","RIGHT_POSITION","originX","originY","overlayX","overlayY"],"mappings":"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","file":"x","sourcesContent":["import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Component({\n    selector: 'general-appearance-panel',\n    templateUrl: './general-appearance-panel.component.html',\n    styleUrls: ['./general-appearance-panel.component.scss'],\n    host: {'class': 'appearance-panel'},\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'branding.logo_light': [''],\n        'branding.logo_dark': [''],\n        'branding.favicon': [''],\n        'env.app_name': [''],\n        'branding.site_description': [''],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public editor: AppearanceEditor,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n          defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n\n    public defaultValue(key: string) {\n        return this.editor.defaultSettings[key];\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\n\nconst BASE_URI = 'css-theme';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CssThemeService {\n    constructor(private http: AppHttpClient) {}\n\n    public all(): PaginatedBackendResponse<CssTheme> {\n        return this.http.get(BASE_URI);\n    }\n\n    public create(params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.post(BASE_URI, params);\n    }\n\n    public update(id, params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public delete(ids: number[]): BackendResponse<void> {\n        return this.http.delete(`${BASE_URI}/${ids}`);\n    }\n}\n","<appearance-panel-meta [path]=\"['General']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_light')\" formControlName=\"branding.logo_light\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #1 (For top navbar)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_dark')\" formControlName=\"branding.logo_dark\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #2 (Everywhere else)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.favicon')\" backendUri=\"uploads/favicon\" diskPrefix=\"branding_media\" formControlName=\"branding.favicon\">\n        Favicon\n    </appearance-image-input>\n\n    <div class=\"input-container\">\n        <label for=\"env.app_name\" trans>Site Name</label>\n        <input type=\"text\" id=\"env.app_name\" [placeholder]=\"defaultValue('env.app_name')\" formControlName=\"env.app_name\">\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"branding.site_description\" trans>Site Description</label>\n        <textarea id=\"branding.site_description\" [placeholder]=\"defaultValue('branding.site_description')\" rows=\"4\" formControlName=\"branding.site_description\"></textarea>\n    </div>\n</div>\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title>\n        <span *ngIf=\"data.theme\" trans>Update Theme</span>\n        <span *ngIf=\"!data.theme\" trans>Create Theme</span>\n    </h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" ngNativeValidate [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <mat-dialog-content class=\"many-inputs\">\n        <div class=\"input-container\">\n            <label for=\"name\" trans>Name</label>\n            <input type=\"text\" id=\"name\" formControlName=\"name\" required minlength=\"3\">\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"is_dark\" formControlName=\"is_dark\" trans>Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme has light text on dark background.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_dark\" formControlName=\"default_dark\" trans>Default Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default dark theme.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_light\" formControlName=\"default_light\" trans>Default Light Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default light theme.</p>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n            <span *ngIf=\"data.theme; else creating\">Update</span>\n            <ng-template #creating>\n                <span>Create</span>\n            </ng-template>\n        </button>\n    </mat-dialog-actions>\n</form>\n\n\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {filter} from 'rxjs/operators';\n\ninterface CrupdateCssThemeModalData {\n    theme: CssTheme;\n}\n\n@Component({\n    selector: 'crupdate-css-theme-modal',\n    templateUrl: './crupdate-css-theme-modal.component.html',\n    styleUrls: ['./crupdate-css-theme-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCssThemeModalComponent {\n    public loading$ = new BehaviorSubject(false);\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<CssTheme>]: string}>({});\n    public form = this.fb.group({\n        name: [''],\n        is_dark: [false],\n        default_dark: [false],\n        default_light: [false],\n    });\n\n    constructor(\n        private dialogRef: MatDialogRef<CrupdateCssThemeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCssThemeModalData,\n        private cssTheme: CssThemeService,\n        private toast: Toast,\n        private fb: FormBuilder,\n    ) {\n        if (data.theme) {\n            this.form.patchValue(data.theme);\n        }\n\n        // make sure \"default_light\" and \"default_dark\"\n        // can't be toggled on at the same time\n        this.form.get('default_dark')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_light').setValue(false);\n            });\n        this.form.get('default_light')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_dark').setValue(false);\n            });\n    }\n\n    public confirm() {\n        const request = this.data.theme ?\n            this.cssTheme.update(this.data.theme.id, this.form.value) :\n            this.cssTheme.create(this.form.value);\n\n        request.subscribe(response => {\n            this.toast.open(this.data.theme ? 'Theme updated' : 'Theme created');\n            this.close(response.theme);\n        }, err => this.errors$.next(err.messages));\n    }\n\n    public close(theme?: CssTheme) {\n        this.dialogRef.close(theme);\n    }\n}\n","<ul [formGroup]=\"form\">\n    <li *ngFor=\"let color of theme.colors | keyvalue\">\n        <color-picker-input [formControlName]=\"color.key\" trans>{{viewName(color.key)}}</color-picker-input>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CssTheme, CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {SetColors} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceEditor, EditorChanges} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\n\n@Component({\n    selector: 'css-theme-colors-panel',\n    templateUrl: './css-theme-colors-panel.component.html',\n    styleUrls: ['./css-theme-colors-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CssThemeColorsPanelComponent implements OnInit, OnDestroy {\n    @Input() theme: CssTheme;\n    public form = new FormGroup({});\n    private colorCache: CssThemeColors = {};\n\n    constructor(\n        private editor: AppearanceEditor,\n        private themes: CssThemeService,\n    ) {}\n\n    ngOnInit() {\n        this.editor.setSaveRequest(this.saveColors.bind(this));\n\n        // build form\n        Object.entries(this.theme.colors).forEach(([name, color]) => {\n            this.form.addControl(name, new FormControl(color));\n        });\n\n        this.editor.initiated$.subscribe(() => {\n            this.setColors(this.theme.colors);\n            this.form.valueChanges.subscribe((value: CssThemeColors) => {\n                this.setColors(value);\n                this.editor.addChanges({'colors': value});\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.editor.setSaveRequest(null);\n    }\n\n    private saveColors(payload: EditorChanges) {\n        return this.themes.update(this.theme.id, payload);\n    }\n\n    private setColors(colors: CssThemeColors) {\n        Object.entries(colors).forEach(([name, color]) => {\n            // make sure we only set colors that actually changed\n            // to keep performance as good as possible\n            if (this.colorCache[name] !== color) {\n                this.editor.postMessage(new SetColors(name, color));\n                this.colorCache[name] = color;\n            }\n        });\n    }\n\n    public viewName(name: string) {\n        return name.replace('be-', '').replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <css-theme-colors-panel\n            [theme]=\"selectedTheme\"\n            *ngIf=\"selectedTheme$ | async as selectedTheme else themesList\"\n    ></css-theme-colors-panel>\n\n    <ng-template #themesList>\n        <button mat-raised-button color=\"accent\" type=\"button\" class=\"new-theme-button\" (click)=\"openCrupdateThemeModal()\" trans>New Theme</button>\n        <ul>\n            <li class=\"nav-item\" *ngFor=\"let theme of loadedThemes$ | async\" (click)=\"setSelectedTheme(theme)\">\n                <div class=\"name\">{{theme.name}}</div>\n                <div class=\"actions\" (click)=\"$event.stopPropagation()\">\n                    <button mat-icon-button type=\"button\" (click)=\"setSelectedTheme(theme)\">\n                        <mat-icon svgIcon=\"drop-custom\"></mat-icon>\n                    </button>\n                    <button mat-icon-button type=\"button\" (click)=\"openCrupdateThemeModal(theme);\">\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\n                    </button>\n                    <button mat-icon-button type=\"button\" (click)=\"maybeDeleteThemeModal(theme)\">\n                        <mat-icon svgIcon=\"delete\"></mat-icon>\n                    </button>\n                </div>\n            </li>\n        </ul>\n    </ng-template>\n</div>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CrupdateCssThemeModalComponent} from '@common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n    selector: 'themes-appearance-panel',\n    templateUrl: './themes-appearance-panel.component.html',\n    styleUrls: ['./themes-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemesAppearancePanelComponent implements OnInit, OnDestroy {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public loadedThemes$ = new BehaviorSubject<CssTheme[]>([]);\n    public selectedTheme$ = new BehaviorSubject<CssTheme>(null);\n    private querySub: Subscription;\n\n    public path$ = this.selectedTheme$.pipe(map(theme => {\n        const path = ['Themes'];\n        if (theme) path.push(theme.name);\n        return path;\n    }));\n\n    constructor(\n        public appearance: AppearanceEditor,\n        private modal: Modal,\n        private themes: CssThemeService,\n        private toast: Toast,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.reloadThemes();\n    }\n\n    ngOnDestroy() {\n        this.querySub && this.querySub.unsubscribe();\n    }\n\n    public openCrupdateThemeModal(theme?: CssTheme) {\n        this.modal.open(CrupdateCssThemeModalComponent, {theme})\n            .afterClosed()\n            .subscribe(newTheme => {\n                if (newTheme) {\n                    this.reloadThemes();\n                }\n            });\n    }\n\n    public setSelectedTheme(theme?: CssTheme) {\n        this.router.navigate([], {queryParams: {theme: theme && theme.id}, queryParamsHandling: 'merge'});\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedTheme$.value) {\n            this.setSelectedTheme();\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public maybeDeleteThemeModal(theme: CssTheme) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Theme',\n            body:  'Are you sure you want to delete this theme?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.deleteTheme(theme);\n        });\n    }\n\n    private reloadThemes() {\n        this.loading$.next(true);\n        this.themes.all()\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.loadedThemes$.next(response.pagination.data);\n                this.bindToQueryParams();\n            });\n    }\n\n    private deleteTheme(theme: CssTheme) {\n        this.themes.delete([theme.id]).subscribe(() => {\n            this.toast.open('Theme deleted');\n            this.reloadThemes();\n        });\n    }\n\n    private bindToQueryParams() {\n        if (this.querySub) return;\n        this.querySub = this.route.queryParams.subscribe((params: {theme?: string}) => {\n            const theme = this.loadedThemes$.value.find(t => t.id === +params.theme);\n            this.selectedTheme$.next(theme);\n        });\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Menu} from '@common/core/ui/custom-menu/menu';\nimport {Settings} from '@common/core/config/settings.service';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuEditor {\n    public allMenus$ = new BehaviorSubject< Menu[]>([]);\n    public activeMenu$ = new BehaviorSubject<Menu>(null);\n\n    constructor(\n        private settings: Settings,\n        private appearance: AppearanceEditor,\n    ) {}\n\n    public create() {\n        const allMenus = [...this.allMenus$.value];\n        this.activeMenu$.next(new Menu({name: 'New Menu'}));\n        allMenus.push(this.activeMenu$.value);\n        this.allMenus$.next(allMenus);\n        this.commitChanges();\n    }\n\n    public reorderActiveMenuItems(previousIndex: number, currentIndex: number) {\n        const activeMenu = {...this.activeMenu$.value};\n        moveItemInArray(activeMenu.items, previousIndex, currentIndex);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    public deleteActive() {\n        const allMenus = [...this.allMenus$.value];\n        const i = allMenus.indexOf(this.activeMenu$.value);\n        allMenus.splice(i, 1);\n        this.activeMenu$.next(null);\n        this.allMenus$.next(allMenus);\n        this.commitChanges();\n    }\n\n    public addItem(item: MenuItem) {\n        const activeMenu = {...this.activeMenu$.value};\n        item = this.transformLocalLinksToRoutes(item);\n        activeMenu.items.push(item);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    public removeItem(item: MenuItem) {\n        const activeMenu = {...this.activeMenu$.value};\n        const i = this.activeMenu$.value.items.indexOf(item);\n        activeMenu.items.splice(i, 1);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    private transformLocalLinksToRoutes(item: MenuItem): MenuItem {\n        const baseUrl = this.settings.getBaseUrl();\n\n        if (item.type !== 'link' || item.action.indexOf(baseUrl) === -1) return item;\n\n        item.type = 'route';\n        item.action = item.action.replace(this.settings.getBaseUrl(), '');\n        return item;\n    }\n\n    public commitChanges() {\n        const menus = JSON.stringify(this.allMenus$.value);\n        this.appearance.setConfig('menus', menus);\n        this.appearance.addChanges({'menus': menus});\n    }\n\n    public setFromJson(json: string) {\n        if ( ! json) return;\n        const menus = JSON.parse(json);\n\n        if ( ! menus) return;\n\n        const allMenus = menus.map(menuData => {\n            const menu = new Menu(menuData);\n            menu.items = menu.items.map(item => new MenuItem(item));\n            return menu;\n        });\n        this.allMenus$.next(allMenus);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuItemCategoriesService {\n    constructor(private http: HttpCacheClient) {}\n\n    public get(): BackendResponse<{categories: MenuItemCategory[]}> {\n        return this.http.getWithCache('admin/appearance/menu-categories');\n    }\n}\n","export class MenuItem {\n    id: number|string;\n    label: string;\n    action: string;\n\n    // ID for model if action matches to specific model. If action\n    // points to a specific custom page, model_id will be that page's ID.\n    model_id: number;\n    type: 'page' | 'link' | 'route' = 'link';\n    order = 1;\n    icon: string;\n    condition: MenuItemCondition = null;\n    target: string = null;\n    position = 0;\n    activeExact = false;\n\n    constructor(params: Partial<MenuItem> = {}) {\n        for (const name in params) {\n            this[name] = params[name];\n        }\n        this.id = Math.floor(Math.random() * (1000 - 1));\n    }\n}\n\nexport type MenuItemCondition = string|string[]|Function;\n","<div class=\"header\">\n    <span class=\"title\" trans>New Menu Item</span>\n    <mat-icon svgIcon=\"close\" (click)=\"close()\"></mat-icon>\n</div>\n<div class=\"new-item-tabs\">\n    <mat-accordion>\n        <form (ngSubmit)=\"addLinkMenuItem()\" [formGroup]=\"linkForm\" ngNativeValidate>\n            <mat-expansion-panel class=\"mat-elevation-z\">\n                <mat-expansion-panel-header><mat-panel-title trans>Link</mat-panel-title></mat-expansion-panel-header>\n                <div class=\"many-inputs expansion-panel-content\">\n                    <div class=\"input-container\">\n                        <label for=\"external-link-url\" trans>URL</label>\n                        <input type=\"url\" id=\"external-link-url\" formControlName=\"action\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"external-link-text\" trans>Link Text</label>\n                        <input type=\"text\" id=\"external-link-text\" formControlName=\"label\" required>\n                    </div>\n                </div>\n                <mat-action-row>\n                    <button mat-button color=\"accent\" type=\"submit\" trans>Add</button>\n                </mat-action-row>\n            </mat-expansion-panel>\n        </form>\n        <mat-expansion-panel class=\"mat-elevation-z\">\n            <mat-expansion-panel-header><mat-panel-title trans>Route</mat-panel-title></mat-expansion-panel-header>\n            <div class=\"items-list expansion-panel-content\">\n                <div class=\"item\" *ngFor=\"let route of appearance.config.menus.availableRoutes\"\n                     (click)=\"addRouteMenuItem(route)\">{{route}}\n                </div>\n            </div>\n        </mat-expansion-panel>\n        <mat-expansion-panel class=\"mat-elevation-z\" *ngFor=\"let category of menuItemCategories\">\n            <mat-expansion-panel-header><mat-panel-title trans>{{category.name}}</mat-panel-title></mat-expansion-panel-header>\n            <div class=\"items-list expansion-panel-content\">\n                <div class=\"item\" *ngFor=\"let item of category.items\" (click)=\"addCustomMenuItem(item)\">{{item.label}}</div>\n            </div>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {FormBuilder} from '@angular/forms';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {MenuItemCategoriesService} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service';\n\n@Component({\n    selector: 'add-menu-item-panel',\n    templateUrl: './add-menu-item-panel.component.html',\n    styleUrls: ['./add-menu-item-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddMenuItemPanelComponent implements OnInit {\n    public linkForm = this.fb.group({\n        action: [''],\n        label: [''],\n    });\n    public menuItemCategories: MenuItemCategory[];\n\n    constructor(\n        public editor: MenuEditor,\n        public appearance: AppearanceEditor,\n        private overlayPanelRef: OverlayPanelRef,\n        private fb: FormBuilder,\n        private itemCategories: MenuItemCategoriesService,\n    ) {}\n\n    ngOnInit() {\n        this.itemCategories.get().subscribe(response => {\n            this.menuItemCategories = response.categories;\n        });\n    }\n\n    public addLinkMenuItem() {\n        this.editor.addItem(new MenuItem({\n            type: 'link',\n            label: this.linkForm.value.label,\n            action: this.linkForm.value.action,\n        }));\n\n        this.linkForm.reset();\n        this.close();\n    }\n\n    public addRouteMenuItem(route: string) {\n        this.editor.addItem(new MenuItem({\n            type: 'route',\n            label: route,\n            action: route,\n        }));\n        this.close();\n    }\n\n    public addCustomMenuItem(item: Partial<MenuItem>) {\n        this.editor.addItem(new MenuItem(item));\n        this.close();\n    }\n\n    public close() {\n        this.overlayPanelRef.close();\n    }\n}\n","<button mat-icon-button (click)=\"selectIcon(icon)\" *ngFor=\"let icon of icons$ | async\">\n  <mat-icon [svgIcon]=\"icon\"></mat-icon>\n</button>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Component({\n    selector: 'icon-selector',\n    templateUrl: './icon-selector.component.html',\n    styleUrls: ['./icon-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconSelectorComponent implements OnInit {\n    public icons$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n    public loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    @Output() iconSelected = new EventEmitter<string>();\n\n    constructor(\n        private http: HttpCacheClient,\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    ngOnInit() {\n        this.loading$.next(true);\n        this.http.get<GenericBackendResponse<{icons: string[]}>>('admin/icons')\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.icons$.next(response.icons);\n            });\n    }\n\n    public selectIcon(icon: string) {\n        // component is used inline\n        if (this.iconSelected.observers.length) {\n            this.iconSelected.next(icon);\n        // component is used as overlay panel\n        } else {\n            this.overlayPanelRef.emitValue(icon);\n            this.overlayPanelRef.close();\n        }\n\n    }\n}\n","<div class=\"title\" trans>Menu Items</div>\n\n<mat-accordion cdkDropList (cdkDropListDropped)=\"reorderMenuItems($event)\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else noActiveMenu\">\n    <mat-expansion-panel\n            class=\"mat-elevation-z menu-item-container\"\n            cdkDrag\n            *ngFor=\"let menuItem of activeMenu.items\"\n            (opened)=\"toggleMenuItem(menuItem)\"\n            (closed)=\"toggleMenuItem(menuItem)\"\n            [attr.data-id]=\"menuItem.id\"\n    >\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                <mat-icon class=\"drag-handle\" cdkDragHandle svgIcon=\"drag-handle\"></mat-icon>\n                <span class=\"name\">{{menuItem.label}}</span>\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <div class=\"many-inputs menu-item-list\">\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-label'}}\" trans>Label</label>\n                <input type=\"text\" [(ngModel)]=\"menuItem.label\" id=\"{{menuItem.id + '-label'}}\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-type'}}\" trans>Type</label>\n                <select [(ngModel)]=\"menuItem.type\" id=\"{{menuItem.id + '-type'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option value=\"link\" trans>Link</option>\n                    <option value=\"route\" trans>Route</option>\n                    <option value=\"page\" trans>Page</option>\n                </select>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-action'}}\" trans>Action</label>\n                <input type=\"text\" [(ngModel)]=\"menuItem.action\" id=\"{{menuItem.id + '-action'}}\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-condition'}}\" trans>Condition</label>\n                <select [(ngModel)]=\"menuItem.condition\" id=\"{{menuItem.id + '-condition'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option [ngValue]=\"null\" trans>None</option>\n                    <option value=\"auth\" trans>Show to Logged in Users Only</option>\n                    <option value=\"guest\" trans>Show to Guest Users Only</option>\n                    <option value=\"admin\" trans>Show to Admin Only</option>\n                </select>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-target'}}\" trans>Open link in</label>\n                <select [(ngModel)]=\"menuItem.target\" id=\"{{menuItem.id + '-target'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option [ngValue]=\"null\" trans>Same Window</option>\n                    <option value=\"_blank\" trans>New Window</option>\n                </select>\n            </div>\n\n            <div class=\"input-container icon-input-container\" #iconInput (click)=\"openIconSelector(iconInput, menuItem)\">\n                <label for=\"{{menuItem.id + '-icon'}}\" trans>Icon</label>\n                <input type=\"text\" readonly [(ngModel)]=\"menuItem.icon\" id=\"{{menuItem.id + '-icon'}}\" placeholder=\"(Optional)\" trans-placeholder>\n                <mat-icon [svgIcon]=\"menuItem.icon\"></mat-icon>\n            </div>\n        </div>\n\n        <mat-action-row>\n            <button mat-button color=\"warn\" class=\"delete-button\" (click)=\"confirmMenuItemDeletion()\" trans>Remove</button>\n        </mat-action-row>\n    </mat-expansion-panel>\n</mat-accordion>\n\n<ng-template #noActiveMenu>\n    <div class=\"no-menu-items\" trans>This menu has no items yet.</div>\n</ng-template>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\n\n@Component({\n    selector: 'menu-items',\n    templateUrl: './menu-items.component.html',\n    styleUrls: ['./menu-items.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuItemsComponent implements OnDestroy {\n    public selectedMenuItem: MenuItem;\n    public subscriptions: Subscription[] = [];\n\n    constructor(\n        public menus: MenuEditor,\n        private modal: Modal,\n        private overlayPanel: OverlayPanel,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => {\n            subscription && subscription.unsubscribe();\n        });\n    }\n\n    public reorderMenuItems(e: CdkDragDrop<void>) {\n        this.menus.reorderActiveMenuItems(e.previousIndex, e.currentIndex);\n    }\n\n    /**\n     * Toggle specified menu item settings panel visibility.\n     */\n    public toggleMenuItem(item: MenuItem) {\n        if (this.selectedMenuItem === item) {\n            this.selectedMenuItem = null;\n        } else {\n            this.selectedMenuItem = item;\n        }\n    }\n\n    /**\n     * Ask user to confirm menu item deletion.\n     */\n    public confirmMenuItemDeletion() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Menu Item',\n            body: 'Are you sure you want to delete this menu item?',\n            ok: 'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.menus.removeItem(this.selectedMenuItem);\n            this.selectedMenuItem = null;\n        });\n    }\n\n    public openIconSelector(origin: HTMLElement, menuItem: MenuItem) {\n        this.overlayPanel.open(IconSelectorComponent, {\n            position: RIGHT_POSITION,\n            origin: new ElementRef(origin),\n        }).valueChanged().subscribe(icon => {\n            menuItem.icon = icon;\n            this.menus.commitChanges();\n            this.cd.detectChanges();\n        });\n    }\n}\n","<appearance-panel-meta [path]=\"['Menus', menus.activeMenu$.value && menus.activeMenu$.value.name]\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <div class=\"menu-panel\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else allMenuList\">\n        <div class=\"many-inputs menu-settings\">\n            <div class=\"input-container\">\n                <label for=\"menu-name\" trans>Menu Name</label>\n                <input type=\"text\" id=\"menu-name\" [(ngModel)]=\"activeMenu.name\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"menu-position\" trans>Menu Position</label>\n                <select id=\"menu-position\" [(ngModel)]=\"activeMenu.position\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option [ngValue]=\"position\" *ngFor=\"let position of appearance.config.menus.positions\">{{getDisplayName(position)}}</option>\n                </select>\n            </div>\n        </div>\n\n        <menu-items></menu-items>\n\n        <div class=\"action-buttons\">\n            <button mat-button color=\"warn\" (click)=\"confirmMenuDeletion()\" trans>Delete Menu</button>\n            <button class=\"button flat add-item-button\" mat-button color=\"accent\" (click)=\"openAddItemPanel()\" trans>Add Item</button>\n        </div>\n    </div>\n\n    <ng-template #allMenuList>\n        <div class=\"menus\">\n            <div class=\"menu nav-item\" *ngFor=\"let menu of menus.allMenus$ | async\" (click)=\"setActiveMenu(menu)\">\n                <span class=\"name\">{{menu.name}}</span>\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"actions\"></mat-icon>\n            </div>\n\n            <div class=\"action-buttons\">\n                <button mat-button color=\"accent\" class=\"button primary\" (click)=\"menus.create()\" trans>Add a Menu</button>\n            </div>\n        </div>\n    </ng-template>\n</div>","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\nimport {AddMenuItemPanelComponent} from '@common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\nimport {Menu} from '@common/core/ui/custom-menu/menu';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'menus-appearance-panel',\n    templateUrl: './menus-appearance-panel.component.html',\n    styleUrls: ['./menus-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenusAppearancePanelComponent {\n    constructor(\n        public appearance: AppearanceEditor,\n        public menus: MenuEditor,\n        private modal: Modal,\n        private settings: Settings,\n        private panel: OverlayPanel,\n        private el: ElementRef<HTMLElement>,\n    ) {\n        this.menus.setFromJson(this.settings.get('menus'));\n    }\n\n    public openAddItemPanel() {\n        const position = RIGHT_POSITION.slice();\n        position[0].offsetX = 10;\n        position[1].offsetX = 10;\n        this.panel.open(AddMenuItemPanelComponent, {\n            position: position,\n            origin: this.el,\n            panelClass: 'add-menu-item-panel-container'\n        });\n    }\n\n    public openPreviousPanel() {\n        if (this.menus.activeMenu$.value) {\n            this.menus.activeMenu$.next(null);\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public setActiveMenu(menu: Menu) {\n        this.menus.activeMenu$.next(menu);\n    }\n\n    public confirmMenuDeletion() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Menu',\n            body: 'Are you sure you want to delete this menu?',\n            ok: 'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.menus.deleteActive();\n        });\n    }\n\n    public getDisplayName(name: string) {\n        return name.replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"['Seo Settings']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <ng-container *ngFor=\"let field of seoFields\">\n        <div class=\"input-container\">\n            <label [for]=\"field.key\" trans>{{field.name}}</label>\n            <textarea type=\"text\" [id]=\"field.key\" [formControlName]=\"field.key\" [placeholder]=\"field.defaultValue\" rows=\"2\"></textarea>\n        </div>\n    </ng-container>\n</div>","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\n\ninterface SeoField {\n    name: string;\n    key: string;\n    defaultValue: string;\n    value: string;\n}\n\n@Component({\n    selector: 'seo-appearance-panel',\n    templateUrl: './seo-appearance-panel.component.html',\n    styleUrls: ['./seo-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeoAppearancePanelComponent implements OnInit {\n    public seoFields: SeoField[];\n    public form = this.fb.group({});\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n    ) {}\n\n    ngOnInit() {\n        this.seoFields = this.editor.defaultSettings['seo_fields'];\n\n        this.seoFields.forEach(field => {\n            this.form.addControl(field.key, this.fb.control(field.value));\n        });\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n}\n","<div class=\"modal-header\">\n    <h2 class=\"modal-title\" mat-dialog-title trans>Code Editor</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n    <div class=\"editor-container\">\n        <p class=\"info\" *ngIf=\"data.language === 'html'\" trans>If entering javascript, wrap it with &lt;script>&lt;/script> tag.</p>\n        <div class=\"editor\" #editor></div>\n    </div>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n    <button type=\"submit\" mat-raised-button color=\"accent\" (click)=\"confirm()\" [disabled]=\"syntaxInvalid$ | async\" trans>Update</button>\n</mat-dialog-actions>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import {ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {filter} from 'rxjs/operators';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {LazyLoaderService} from '@common/core/utils/lazy-loader.service';\nimport {BehaviorSubject} from 'rxjs';\n\ndeclare let ace;\n\nexport interface CodeEditorModalData {\n    contents?: string;\n    language: string;\n}\n\n@Component({\n    selector: 'code-editor-modal',\n    templateUrl: './code-editor-modal.component.html',\n    styleUrls: ['./code-editor-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CodeEditorModalComponent implements OnInit {\n    @ViewChild('editor', { static: true }) editorEl: ElementRef;\n\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public syntaxInvalid$ = new BehaviorSubject<boolean>(false);\n    private editor;\n\n    constructor(\n        private dialogRef: MatDialogRef<CodeEditorModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CodeEditorModalData,\n        private lazyLoader: LazyLoaderService,\n    ) {}\n\n    ngOnInit() {\n        this.initEditor(this.data.contents, this.data.language);\n        this.overrideDialogCloseEvents();\n    }\n\n    public confirm() {\n        this.close(this.editor.getValue());\n    }\n\n    public close(value?: string) {\n        this.dialogRef.close(value);\n    }\n\n    private initEditor(contents: string, language = 'html') {\n        this.loading$.next(true);\n        this.lazyLoader.loadAsset('js/ace/ace.js', {type: 'js'}).then(() => {\n            this.editor = ace.edit(this.editorEl.nativeElement);\n            this.editor.getSession().setMode('ace/mode/' + language);\n            this.editor.setTheme('ace/theme/chrome');\n            this.editor.$blockScrolling = Infinity;\n            if (contents) this.editor.setValue(contents, 1);\n\n            this.editor.getSession().on('changeAnnotation', () => {\n                const annotations = this.editor.getSession().getAnnotations() as any[];\n\n                // hide !doctype syntax error\n                if (annotations[0] && /doctype first/.test(annotations[0].text)) {\n                    annotations.splice(0, 1);\n                    this.editor.getSession().setAnnotations(annotations);\n                    return;\n                }\n\n                // prevent editor submit if there are syntax errors\n                const syntaxInvalid = this.editor\n                    .getSession()\n                    .getAnnotations()\n                    .filter(a => a.type === 'error')\n                    .length > 0;\n                this.syntaxInvalid$.next(syntaxInvalid);\n            });\n            this.loading$.next(false);\n        });\n    }\n\n    /**\n     * Need to always send dialog data, regardless of how it was closed.\n     * Angular material does not provide easy way to do this, so\n     * we need to override backdrop click and escape key close events.\n     */\n    private overrideDialogCloseEvents() {\n        this.dialogRef.disableClose = true;\n\n        // close on backdrop click\n        this.dialogRef.backdropClick().subscribe(() => {\n            this.close();\n        });\n\n        // close on escape key\n        this.dialogRef.keydownEvents()\n            .pipe(filter(event => event.keyCode === ESCAPE))\n            .subscribe(() => this.close());\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\nimport {CodeEditorModalComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SetCustomCss, SetCustomHtml} from '@common/shared/appearance/commands/appearance-commands';\n\n@Component({\n    selector: 'custom-code-appearance-panel',\n    templateUrl: './custom-code-appearance-panel.component.html',\n    styleUrls: ['./custom-code-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomCodeAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'custom-code.css': [''],\n        'custom-code.html': [''],\n    });\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n        private modal: Modal,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n            defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n    }\n\n    public openModal(type: 'css'|'html') {\n        const key = 'custom-code.' + type;\n        const initialValue = this.form.value[key] || '',\n            params = {contents: this.form.value[key], language: type};\n        this.modal.open(CodeEditorModalComponent, params)\n            .afterClosed()\n            .subscribe(value => {\n                // undefined means user closed modal without clicking \"update\" button\n                if (value === undefined || initialValue === value) return;\n                const newValue = {[key]: value};\n                this.form.patchValue(newValue);\n                this.editor.saveChanges(newValue).subscribe(() => {\n                    this.addCodeToPreview(type, value);\n                    this.toast.open('Custom code saved');\n                });\n            });\n    }\n\n    private addCodeToPreview(type: 'css'|'html', content: string) {\n        if (type === 'css') {\n            this.editor.postMessage(new SetCustomCss(content));\n        } else {\n            this.editor.postMessage(new SetCustomHtml(content));\n        }\n    }\n}\n","<appearance-panel-meta [path]=\"['Custom Code']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n   <button type=\"button\" class=\"nav-item\" (click)=\"openModal('css')\">\n      <span class=\"text\" trans>Custom CSS</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n   <button class=\"nav-item\" (click)=\"openModal('html')\">\n      <span class=\"text\" trans>Custom HTML & Javascript</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n</div>","<mat-sidenav-container>\n    <mat-sidenav [opened]=\"!leftColumnIsHidden\" [mode]=\"(breakpoints.isMobile$ | async) ? 'over' : 'side'\" class=\"sidebar\">\n        <div class=\"header\">\n            <div class=\"back-button\" (click)=\"closeEditor()\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </div>\n            <div class=\"title\" trans>Appearance Editor</div>\n            <button\n                    mat-raised-button\n                    color=\"accent\"\n                    class=\"button primary save-button\"\n                    (click)=\"editor.saveChanges()\"\n                    [disabled]=\"!(editor.changes$ | async) || (editor.loading$ | async)\"\n            >\n                <span *ngIf=\"editor.changes$ | async; else saved\" trans>Save</span>\n                <ng-template #saved>\n                    <span trans>Saved</span>\n                </ng-template>\n            </button>\n        </div>\n\n        <ng-container *ngIf=\"editor.activePanel$ | async as activePanel; else navigation\">\n            <ng-container [ngSwitch]=\"activePanel.name\">\n                <general-appearance-panel *ngSwitchCase=\"'general'\"></general-appearance-panel>\n                <themes-appearance-panel *ngSwitchCase=\"'themes'\"></themes-appearance-panel>\n                <menus-appearance-panel *ngSwitchCase=\"'menus'\"></menus-appearance-panel>\n                <seo-appearance-panel *ngSwitchCase=\"'seo-settings'\"></seo-appearance-panel>\n                <custom-code-appearance-panel *ngSwitchCase=\"'custom-code'\"></custom-code-appearance-panel>\n                <ng-container *ngSwitchDefault>\n                    <ng-template *ngIf=\"panelPortal$ | async as portal\" [cdkPortalOutlet]=\"portal\"></ng-template>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n\n        <ng-template #navigation>\n            <div class=\"root-navigation\">\n                <a class=\"nav-item\" [routerLink]=\"[]\" [queryParams]=\"{panel: slugify(section.name)}\" *ngFor=\"let section of editor.config.sections\">\n                    <span class=\"text\" trans>{{viewName(section.name)}}</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </a>\n            </div>\n        </ng-template>\n\n    </mat-sidenav>\n\n    <mat-sidenav-content>\n        <div class=\"live-preview\">\n            <iframe src=\"about:blank\" #iframe></iframe>\n        </div>\n    </mat-sidenav-content>\n</mat-sidenav-container>\n\n<button mat-fab (click)=\"toggleLeftSidebar()\" class=\"sidebar-toggle-button\">\n    <mat-icon svgIcon=\"edit\"></mat-icon>\n</button>","import {ChangeDetectionStrategy, Component, ElementRef, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AppearanceEditor} from './appearance-editor/appearance-editor.service';\nimport {slugifyString} from '@common/core/utils/slugify-string';\nimport {Subscription} from 'rxjs';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {map} from 'rxjs/operators';\nimport {BreakpointsService} from '@common/core/ui/breakpoints.service';\n\n@Component({\n    selector: 'appearance',\n    templateUrl: './appearance.component.html',\n    styleUrls: ['./appearance.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppearanceComponent implements OnInit, OnDestroy {\n    @ViewChild('iframe', { static: true }) iframe: ElementRef;\n    private routerSub: Subscription;\n    public leftColumnIsHidden = false;\n\n    public panelPortal$ = this.editor.activePanel$.pipe(map(panel => {\n        return (panel && panel.component) ? new ComponentPortal(panel.component) : null;\n    }));\n\n    constructor(\n        public editor: AppearanceEditor,\n        private router: Router,\n        private route: ActivatedRoute,\n        public breakpoints: BreakpointsService,\n    ) {}\n\n    ngOnInit() {\n        this.leftColumnIsHidden = this.breakpoints.isMobile$.value;\n        this.editor.init(\n            this.iframe.nativeElement,\n            this.route.snapshot.data.defaultSettings\n        );\n        this.routerSub = this.route.queryParams\n            .subscribe((params: {panel?: string}) => {\n                this.editor.openPanel(params.panel);\n            });\n    }\n\n    ngOnDestroy() {\n        this.routerSub && this.routerSub.unsubscribe();\n    }\n\n    public closeEditor() {\n        this.router.navigate(['admin']);\n    }\n\n    public slugify(str: string) {\n        return slugifyString(str);\n    }\n\n    public viewName(name: string) {\n        return name.replace('-', ' ');\n    }\n\n    public toggleLeftSidebar() {\n        this.leftColumnIsHidden = !this.leftColumnIsHidden;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {CanDeactivate} from '@angular/router';\nimport {AppearanceComponent} from './appearance.component';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CanDeactivateAppearance implements CanDeactivate<AppearanceComponent> {\n    constructor(\n        private editor: AppearanceEditor,\n        private modal: Modal,\n    ) {}\n\n    canDeactivate(): Observable<boolean>|boolean {\n        if ( ! this.editor.changes$.value) return true;\n\n        return this.modal.show(ConfirmModalComponent, {\n            title: 'Close Appearance Editor',\n            body: 'Are you sure you want to close appearance editor?',\n            bodyBold: 'All unsaved changes will be lost.',\n            ok: 'Close',\n            cancel: 'Stay',\n        }).afterClosed();\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppearanceEditorResolver implements Resolve<GenericBackendResponse<{[key: string]: any}>> {\n    constructor(\n        private router: Router,\n        private http: AppHttpClient\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<GenericBackendResponse<{[key: string]: any}>> {\n        return this.http.get<GenericBackendResponse<{[key: string]: any}>>('admin/appearance/values').pipe(\n            catchError(() => {\n                this.router.navigate(['/admin']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/admin']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {AppearanceComponent} from './appearance.component';\nimport {CanDeactivateAppearance} from './can-deactivate-appearance.guard';\nimport {AuthGuard} from '../../guards/auth-guard.service';\nimport {AppearanceEditorResolver} from './appearance-editor/appearance-editor-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AppearanceComponent,\n        data: {permissions: ['appearance.update']},\n        resolve: {defaultSettings: AppearanceEditorResolver},\n        canActivate: [AuthGuard],\n        canDeactivate: [CanDeactivateAppearance],\n        children: [\n            {path: ''},\n            {path: ':panel'},\n            {path: ':panel/:activeItem'},\n        ]\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AppearanceRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n\n@NgModule({\n    declarations: [\n        IconSelectorComponent,\n    ],\n    imports: [\n        CommonModule,\n        LoadingIndicatorModule,\n\n        MatButtonModule,\n        MatIconModule,\n    ],\n    exports: [\n        IconSelectorComponent,\n    ]\n})\nexport class IconSelectorModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AppearanceComponent} from './appearance.component';\nimport {MenusAppearancePanelComponent} from './panels/menus-appearance-panel/menus-appearance-panel.component';\nimport {AddMenuItemPanelComponent} from './panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\nimport {AppearancePanelMetaComponent} from './appearance-panel-meta/appearance-panel-meta.component';\nimport {MenuItemsComponent} from './panels/menus-appearance-panel/menus/menu-items/menu-items.component';\nimport {AppearanceRoutingModule} from './appearance-routing.module';\nimport {CodeEditorModalComponent} from './panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {ThemesAppearancePanelComponent} from './panels/themes-appearance-panel/themes-appearance-panel.component';\nimport {CrupdateCssThemeModalComponent} from './panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssThemeColorsPanelComponent} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component';\nimport {GeneralAppearancePanelComponent} from '@common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component';\nimport {HighlightInPreviewDirective} from './highlight-in-preview.directive';\nimport {SeoAppearancePanelComponent} from '@common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component';\nimport {CustomCodeAppearancePanelComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component';\nimport {AppearanceImageInputComponent} from '@common/admin/appearance/appearance-image-input/appearance-image-input.component';\nimport {IconSelectorModule} from '@common/shared/icon-selector/icon-selector.module';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ImageOrIconModule} from '@common/core/ui/image-or-icon/image-or-icon.module';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n@NgModule({\n    imports: [\n        AppearanceRoutingModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        IconSelectorModule,\n        TranslationsModule,\n        ImageOrIconModule,\n        LoadingIndicatorModule,\n        ColorPickerInputModule,\n\n        // material\n        MatMenuModule,\n        MatProgressBarModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatExpansionModule,\n        DragDropModule,\n        MatSidenavModule,\n        PortalModule,\n        MatSlideToggleModule,\n    ],\n    exports: [\n        AppearancePanelMetaComponent,\n        HighlightInPreviewDirective,\n        AppearanceImageInputComponent,\n    ],\n    declarations: [\n        AppearanceComponent,\n        AddMenuItemPanelComponent,\n        AppearancePanelMetaComponent,\n        MenuItemsComponent,\n        CodeEditorModalComponent,\n        CrupdateCssThemeModalComponent,\n        CssThemeColorsPanelComponent,\n        AppearanceImageInputComponent,\n        MenusAppearancePanelComponent,\n        ThemesAppearancePanelComponent,\n        GeneralAppearancePanelComponent,\n        SeoAppearancePanelComponent,\n        CustomCodeAppearancePanelComponent,\n        HighlightInPreviewDirective,\n    ],\n})\nexport class BaseAppearanceModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ColorPickerInputComponent} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatIconModule} from '@angular/material/icon';\n\n\n@NgModule({\n    declarations: [\n        ColorPickerInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        MatIconModule,\n    ],\n    exports: [\n        ColorPickerInputComponent,\n    ]\n})\nexport class ColorPickerInputModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BaseAppearanceModule} from '@common/admin/appearance/base-appearance.module';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\n\n\n@NgModule({\n    declarations: [\n        HomepageAppearancePanelComponent,\n    ],\n    imports: [\n        CommonModule,\n        BaseAppearanceModule,\n        ReactiveFormsModule,\n        ColorPickerInputModule,\n        TranslationsModule,\n\n        // material\n        MatIconModule,\n        MatButtonModule,\n        TranslationsModule,\n        MatSliderModule,\n    ]\n})\nexport class AppAppearanceModule {\n}\n","import { ConnectedPosition } from '@angular/cdk/overlay';\n\nexport const RIGHT_POSITION: ConnectedPosition[] = [\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 5},\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 5},\n];\n"]}